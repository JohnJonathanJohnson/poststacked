// Parse a stack of characters into a SORTED (to-be-implemented) stack of numbers //
{

{
	chars! SIZE 0 > {
		chars! PEEK 58 <
		chars! PEEK 47 > & {
			chars! POP cbuf! PUSH
			SeperateInput! PEEK RUN
		} IF
	} IF
} SeperateInput! PUSH

{

	chars! PEEK 58 <
	chars! PEEK 47 > & SeperateInput! PEEK IF
	chars! SIZE 0 > {chars! POP _ PUSH} IF

	cbuf! SIZE 0 > {
		0 nums! PUSH
		ParseNum! PEEK RUN
	} IF

	// Sorting happens here //
	nums! SIZE 0 > {
		nums! POP top! PUSH
		InsertSorted! PEEK RUN
		top! POP nums! PUSH
		PutBufBack! PEEK RUN
	} IF

	chars! SIZE 0 > ParseNums! PEEK IF
	nums! SIZE 0 = {2 EXIT} IF
} ParseNums! PUSH

{

	cbuf! SIZE 0 > {
		nums! POP 10 * nums! PUSH
		nums! POP cbuf! POP INT 48 - + nums! PUSH
		ParseNum! PEEK RUN
	} IF
} ParseNum! PUSH

{
	nums! SIZE 0 > {
		nums! PEEK top! PEEK < {
			nums! POP nbuf! PUSH
			InsertSorted! PEEK RUN
		} IF
	} IF
} InsertSorted! PUSH

{
	nbuf! SIZE 0 > {
		nbuf! POP nums! PUSH
		PutBufBack! PEEK RUN
	} IF
} PutBufBack! PUSH

chars! RENAME
chars! SIZE 0 = {1 EXIT} IF
chars! SIZE 0 > ParseNums! PEEK IF

cbuf! FLUSH
nbuf! FLUSH
ParseNum! FLUSH
ParseNums! FLUSH
chars! FLUSH
SeperateInput! FLUSH
InsertSorted! FLUSH
PutBufBack! FLUSH
top! FLUSH
_ FLUSH

nums!
} ParseNums PUSH


// Accepts input until Q is input //
{
	{
		SCAN cbuf! PUSH
		cbuf! PEEK 'Q' = ! AcceptanceLoop! PEEK IF
	} AcceptanceLoop! PUSH
	AcceptanceLoop! PEEK RUN
	AcceptanceLoop! FLUSH
	cbuf! POP _ PUSH
	_ FLUSH
	cbuf!
} AcceptInput PUSH


// Prints a stack //
{
	printed! CLONE
	{
		',' PRINT
		' ' PRINT
		printed! POP PRINT
		printed! SIZE 0 > print_the_thing! PEEK IF
	} print_the_thing! PUSH
	printed! SIZE 0 > {printed! POP PRINT} IF
	printed! SIZE 0 > print_the_thing! PEEK IF
	print_the_thing! FLUSH
	'\n' PRINT
} PRINT_STACK PUSH

// Now I need to split my input into two, based on space and \n //
{

	sentence! RENAME
	1 1! PUSH

	{
		sentence! SIZE 0 > {
			sentence! PEEK ' ' =
			sentence! PEEK '\n' = | {
				sentence! POP _ PUSH
				DestroySpace! PEEK RUN
			} IF
		} IF

		_ FLUSH
	} DestroySpace! PUSH

	{
		' ' cbuf! PUSH
		1! PEEK 1 = {
			cbuf! words2! RENAME
			words1! cbuf! RENAME
		} IF

		1! PEEK -1 = {
			cbuf! words1! RENAME
			words2! cbuf! RENAME
		} IF

		1! POP -1 * 1! PUSH
		1! PEEK PRINT
		'\n' PRINT
	} Swap! PUSH

	{

		sentence! SIZE 0 > {
		sentence! PEEK ' ' =
		sentence! PEEK '\n' = | {
			sentence! PEEK PRINT
			'\n' PRINT
			DestroySpace! PEEK RUN
			Swap! PEEK RUN
		} IF
		} IF

		sentence! SIZE 0 > {
			sentence! PEEK ' ' = !
			sentence! PEEK '\n' = ! & {
				sentence! PEEK PRINT
				'\n' PRINT
				sentence! POP cbuf! PUSH
			} IF
		} IF

		sentence! SIZE 0 > GetText! PEEK IF
	} GetText! PUSH

	sentence! SIZE 0 > GetText! PEEK IF

	words1! SIZE 0 = {
		cbuf! words1! RENAME
	} IF

	words2! SIZE 0 = {
		cbuf! words2! RENAME
	} IF

	// reverse back //
	{
		words! RENAME
		Stuff! PEEK RUN
		cbuf!
	} Reverse! PUSH

	{
		words! SIZE 0 > {words! POP cbuf! PUSH Stuff! PEEK RUN} IF
	} Stuff! PUSH

	words2! Reverse! PEEK RUN words2! RENAME
	words1! Reverse! PEEK RUN words1! RENAME

	sentence! FLUSH
	Stuff! FLUSH
	words! FLUSH
	GetText! FLUSH
	DestroySpace! FLUSH
	Swap! FLUSH
	Reverse! FLUSH
	1! FLUSH
	cbuf! FLUSH
	words2! words1!
} SplitInput PUSH

// Finally, compare the two stacks. //
{
	nums_2! CLONE
	nums_1! CLONE

	{
		nums_1! POP nums_2! POP - result! PUSH
		result! PEEK 0 < {result! POP -1 * result! PUSH} IF
		result! POP result! POP + result! PUSH
		nums_1! SIZE 0 > nums_2! SIZE 0 > & CompareAll! PEEK IF
	} CompareAll! PUSH

	0 result! PUSH
	nums_1! SIZE 0 > nums_2! SIZE 0 > & CompareAll! PEEK RUN
	result! POP
} Compare PUSH

AcceptInput POP RUN inputs RENAME

inputs PRINT_STACK PEEK RUN
inputs SplitInput POP RUN nums_1 RENAME nums_2 RENAME

nums_1 PRINT_STACK PEEK RUN
nums_2 PRINT_STACK PEEK RUN

nums_1 ParseNums PEEK RUN nums_1 RENAME
nums_2 ParseNums POP RUN nums_2 RENAME

nums_1 PRINT_STACK PEEK RUN
nums_2 PRINT_STACK POP RUN

'R' PRINT
'e' PRINT
's' PRINT
'u' PRINT
'l' PRINT
't' PRINT
':' PRINT
' ' PRINT
nums_1 nums_2 Compare POP RUN PRINT
'\n' PRINT

0 EXIT
